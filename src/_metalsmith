#!/usr/bin/env node


/**
 * Dependencies.
 */

const chalk = require('chalk');
const { existsSync: exists, readFileSync: readFile } = require('fs');
const Metalsmith = require('metalsmith');
const program = require('commander');
const resolve = require('path').resolve;


/**
 * Reads and parses a JSON file
 *
 * @param   {String} path
 *
 * @returns {Object}
 */
const jsonFile = path => JSON.parse(readFile(path, 'utf8'));

/**
 * Log an error and then exit the process.
 *
 * @param   {String} msg
 * @param   {String} stack  [optional] stack trace to print
 *
 * @returns {Void}
 */
const fatal = (msg, stack) => {
  console.error();
  console.error(chalk.red('  Metalsmith') + chalk.gray(' · ') + msg);
  if (stack) {
    console.error();
    console.error(chalk.gray(stack));
  }
  console.error();
  process.exit(1);
};

/**
 * Log a message
 *
 * @param   {String} message
 *
 * @returns {Void}
 */
const log = (message) => {
  console.log();
  console.log(chalk.gray('  Metalsmith · ') + message);
  console.log();
};

/**
 * Normalize an `obj` of plugins.
 * Converts an object to an array of plugins
 *
 * @param {Mixed} obj Array or Object
 *
 * @returns {Array}
 */
const normalize = (obj) => {
  if (obj instanceof Array) {
    return obj;
  }
  else if (!obj) {
    return [];
  }

  return Object.keys(obj).map((key) => {
    const plugin = {};
    plugin[key] = obj[key];
    return plugin;
  });
};


/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .option('-c, --config <path>', 'configuration file location', 'metalsmith.json');

/**
 * Examples.
 */

program.on('--help', () => {
  /* eslint no-console:0 */
  console.log('  Examples:');
  console.log();
  console.log('    # build from metalsmith.json:');
  console.log('    $ metalsmith');
  console.log();
  console.log('    # build from lib/config.json:');
  console.log('    $ metalsmith --config lib/config.json');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

/**
 * Config.
 */

const dir = process.cwd();
const config = program.config;
const path = resolve(dir, config);
if (!exists(path)) {
  fatal(`could not find a ${config} configuration file.`);
}

let json;
try {
  json = jsonFile(path);
}
catch (e) {
  fatal(`it seems like ${config} is malformed.`);
}

/**
 * Metalsmith.
 */

const metalsmith = new Metalsmith(dir);
if (json.source) metalsmith.source(json.source);
if (json.destination) metalsmith.destination(json.destination);
if (json.concurrency) metalsmith.concurrency(json.concurrency);
if (json.metadata) metalsmith.metadata(json.metadata);
if (json.clean != null) metalsmith.clean(json.clean);
if (json.frontmatter != null) metalsmith.frontmatter(json.frontmatter);
if (json.ignore != null) metalsmith.ignore(json.ignore);

/**
 * Plugins.
 */

normalize(json.plugins).forEach((plugin) => {
  Object.keys(plugin).forEach((name) => {
    /* eslint import/no-dynamic-require:0, global-require: 0 */
    const opts = plugin[name];
    let mod;

    try {
      const local = resolve(dir, name);
      const npm = resolve(dir, 'node_modules', name);

      if (exists(local) || exists(`${local}.js`)) {
        mod = require(local);
      }
      else if (exists(npm)) {
        mod = require(npm);
      }
      else {
        mod = require(name);
      }
    }
    catch (e) {
      fatal(`failed to require plugin "${name}".`);
    }

    try {
      metalsmith.use(mod(opts));
    }
    catch (e) {
      fatal(`error using plugin "${name}"...`, `${e.message}\n\n${e.stack}`);
    }
  });
});

/**
 * Build.
 */

metalsmith.build((err) => {
  if (err) {
    return fatal(err.message, err.stack);
  }
  return log(`successfully built to ${metalsmith.destination()}`);
});
